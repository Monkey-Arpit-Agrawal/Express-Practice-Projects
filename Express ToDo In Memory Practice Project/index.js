/*
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created . Also , todo should have a completed field .
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123
    - For any other route not defined in the server return 404
 */

const express = require('express') ;
const app = express() ;

const path = require('path') ;

let todoArray = [] ;

app.use(express.json()) ;

app.get('/' , function (req , res) {
    res.status(200).sendFile(path.join(__dirname,"index.html")) ;
}) ;

app.get('/todos' , function (req ,res) {
    
    if (todoArray.length == 0) {
        res.status(404).json({
            'Message' : 'ToDo List Is Empty'
        })
    } else {
        res.status(200).json({
            "ToDo List" : todoArray
        })
    }

}) ;

app.get('/todos/:id' , function (req , res) {
    
    let todoId = parseInt(req.params.id) ;

    let todoExists = todoArray.findIndex((todo) => (todo.Id == todoId)) ;

    if (todoExists == -1) {
        res.status(404).json({
            'Message' : 'ToDo Does Not Exist For the Given Id'
        })
    } else {
        res.status(200).json({
            'ToDo' : todoArray[todoExists]
        })
    }
}) ;

app.post('/todos' , function (req,res){

    let todoTitle = req.body.title ;
    let todoCompleted = req.body.completed ;
    let todoDescription = req.body.description ;

    let todoId = 0 ;

    if (todoArray.length != 0){
        todoId = todoArray[todoArray.length - 1].Id ;
    } 

    let newTodo = {
        Id : todoId + 1 ,
        Title : todoTitle ,
        Description : todoDescription ,
        Completed : todoCompleted
    }

    todoArray.push(newTodo) ;

    res.status(201).json({
        'Id' : todoId + 1
    })

})

app.put('/todos/:id' , function(req , res){

    let todoId = req.params.id ;

    if (todoArray.length == 0) {
        res.status(404).json({
            'Message' : 'ToDo List Is Empty'
        })
    } else {
        let todoExists = todoArray.findIndex((todo) => (todo.Id == todoId)) ;

        if (todoExists == -1) {
            res.status(404).json({
                'Message' : 'ToDo Does Not Exist For The Given Id'
            })
        } else {
            
            todoArray[todoExists].Title = req.body.title ?? todoArray[todoExists].Title ;
            todoArray[todoExists].Description = req.body.description ?? todoArray[todoExists].Description ;
            todoArray[todoExists].Completed = req.body.completed ?? todoArray[todoExists].Completed ;

            res.status(200).json({
                'Updated ToDo' : todoArray[todoExists]
            })

        }
    }

}) ;

app.delete('/todos/:id' , function (req,res) {
    
    let todoId = req.params.id ;

    if (todoArray.length == 0) {
        res.status(404).json({
            'Message' : 'ToDo List Is Empty'
        })
    } else {

        let todoExists = todoArray.findIndex((todo) => (todo.Id == todoId)) ;

        if (todoExists == -1) {
            res.status(404).json({
                'Message' : 'ToDo Does Not Exist For The Given Id'
            })
        } else {

            todoArray.splice(todoExists,1) ;

            res.status(200).json({
                "Message" : 'ToDo Deleted Successfully' ,
                "ToDo List" : todoArray
            })

        }
    }

}) ;

app.use(function (req,res) {
    res.status(404).json({
        'Message' : 'Invalid Route'
    })
}) ;

app.listen(3000 , () => {
    console.log(`Server Is Running On the Port : ${3000}`) ;
}) ;
