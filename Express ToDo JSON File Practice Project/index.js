/*
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database , Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)
  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created and a completed field .
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123
    - For any other route not defined in the server return 404
 */

const express = require('express') ;
const app = express() ;

const path = require('path') ;

const fs = require('fs') ;

function parseTodo (result) {
    try {
        let data = JSON.parse(result) ;
        if (Array.isArray(data)) {
            return data ;
        } else {
            return [] ;
        }
    } catch (error) {
        return [] ;
    }
}

app.use(express.json()) ;

app.get('/' , function (req,res) {
    res.status(200).sendFile(path.join(__dirname,'index.html')) ;
}) ;

app.get('/todos' , function (req,res) {
    
    fs.readFile(path.join(__dirname,'./todos.json' ), 'utf-8' , (err,result) => {
        if (err) {
            console.log(err);
            
            res.status(500).send('Error in reading the file . Try Again') ; 

        } else {
            let todoArray = parseTodo(result) ;

            if (todoArray.length == 0) {
                res.status(404).send('Todo List Is Empty') ;
            } else {
                res.status(200).json({
                    'ToDo List' : todoArray
                })
            }
        }
    })

}) ;

app.get('/todos/:id' , function (req,res){

    let todoId = parseInt(req.params.id) ;

    fs.readFile(path.join(__dirname,'./todos.json' ), 'utf-8' , (err,result) => {
        if (err) {
            res.status(500).send('Error in reading the file . Try Again') ;
        } else {
            let todoArray = parseTodo(result) ;

            if (todoArray.length == 0) {
                res.status(404).send('Todo List Is Empty') ;
            } else {
                let todoExists = todoArray.findIndex((todo) => (todo.Id == todoId)) ;
                
                if (todoExists == -1) {
                    res.status(404).send('Todo Does Not Exists For The Given ID') ;
                } else {
                    res.status(200).json({
                        'ToDo' : todoArray[todoExists]
                    })
                }
            }

        }
    })

}) ;

app.post('/todos' , function (req , res){

    let todoTitle = req.body.title ;
    let todoDescription = req.body.description ;
    let todoCompleted = req.body.completed ;

    fs.readFile(path.join(__dirname,'./todos.json' ), 'utf-8' , (err,result) => {
        if (err) {
            res.status(500).send('Error in reading the file . Try Again') ;
        } else {
            let todoArray = parseTodo(result) ;

            let todoId = 0 ;

            if (todoArray.length != 0) {
                todoId = todoArray[todoArray.length - 1].Id ;
            }

            let newTodo = {
                "Id" : todoId + 1 ,
                "Title" : todoTitle ,
                "Description" : todoDescription ,
                "Completed" : todoCompleted
            }

            todoArray.push(newTodo) ;

            fs.writeFile(path.join(__dirname,'./todos.json' ),JSON.stringify(todoArray,null,2),(err) => {
                if (err) {
                    res.status(500).send("Error Occurred . Please Try Again") ;
                } else {
                    res.status(200).json({
                        'Message' : 'ToDo Added Successfully' , 
                        'Id' : todoId + 1
                    })
                }
            })

        }
    })

}) ;

app.listen(3000 , () => {
    console.log('App is running on the server 3000') ;
}) ;